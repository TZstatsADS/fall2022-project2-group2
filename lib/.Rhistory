install.packages("RColorBrewer")
library(RColorBrewer)}
if (!require("RSocrata")) {
install.packages("RSocrata")
library(RSocrata)}
if (!require("rstudioapi")) {
install.packages("rstudioapi")
library(rstuioapi)}
if (!require("sf")) {
install.packages("sf")
library(sf)}
if (!require("tidyverse")) {
install.packages("tidyverse")
library(tidyverse)}
if (!require("wesanderson")) {
install.packages("wesanderson")
library(wesanderson)}
if (!require("bslib")) {
install.packages("bslib")
library(bslib)}
#data preparation
borough_list <- readRDS("../data/borough_list.Rda")
cuisine_list <- readRDS("../data/cuisine_list.Rda")
#==============================================Shiny UI=================================================
# Define UI for application that display food inspections result visualization
ui <- navbarPage(
theme = bs_theme(bootswatch = "litera"),
"Restaurant Inspectation",
######## tab 1 Introduction #######
tabPanel("Introduction"),
######## tab2 Filter Plots ########
tabPanel("Filtered Plots",
fluidRow(
column(3,
selectInput("borough", "Borough", borough_list[!borough_list %in% c("0")], selected = "Overall"),
selectInput("cuisine", "Cuisine", cuisine_list, selected = "Overall")
),
column(9,
plotOutput("plot_action"),
plotOutput("plot_critical_level"),
plotOutput("plot_top_5_violation")
)
)
),
######### tab3 Violation Visualization #######
navbarMenu("Violations Visualization",
###### subtab 3.1 Violation Map #######
tabPanel("Violations Map",
fluidRow(
column(3,
selectInput("type", "Type of Violations",c("Number of Total Violations", "Number of Crital Violations")),
selectInput("time", "Year", c("2019", "2020", "2021", "2022"))
),
column(9,
leafletOutput("map", height = 600)
)
)
),
######subtab 3.2 Comparison of Violations by Years ######
tabPanel("Comparison by Years",
fluidRow(
column(4,
selectInput("type_comp", "Type of Violations", c("Number of Total Violations", "Number of Crital Violations"))
),
column(4,
selectInput("time1", "Year", c("2019", "2020", "2021", "2022"))
),
column(4,
selectInput("time2", "Year", c("2019", "2020", "2021", "2022"), selected = "2020")
)
),
fluidRow(
column(6,
leafletOutput("map_comp1", height = 600)
),
column(6,
leafletOutput("map_comp2", height = 600)
)
)
)),
######### tab 4 Inspection Score Visualization #########
tabPanel("Inspection Score Visualization",
fluidRow(column(3,
selectInput("score_year","Year:", c("2019", "2020", "2021", "2022"))),
column(9, leafletOutput("score_map", height=600)))),
######### tab 5 References ##############
tabPanel("Reference")
)
#========================================Shiny Server=================================================
# Define server logic required to draw a histogram
server <- function(input, output) {
#import pre-processed data
violations <- readRDS("../data/violations.Rda")
score_map <- readRDS("../data/score_map.Rda")
df <- readRDS("../data/df.Rda")
# Filtered plots
output$plot_action <- renderPlot({
if (input$borough == 'Overall' & input$cuisine == 'Overall') {
df_action <- df
} else if (input$borough != 'Overall' & input$cuisine == 'Overall') {
df_action <- df %>%
filter(boro == input$borough)
} else if (input$borough == 'Overall' & input$cuisine != 'Overall') {
df_action <- df %>%
filter(cuisine_description == input$cuisine)
} else {
df_action <- df %>%
filter(boro == input$borough,
cuisine_description == input$cuisine)
}
df_action %>%
group_by(year, action) %>%
summarize(num_violations = n()) %>%
ggplot(aes(x = year, y = num_violations, fill = action)) +
geom_bar(stat = "identity") +
labs(title = "Number of Actions over Time", x = "Year", y = "Count", fill = "Action") +
scale_fill_manual(values = wes_palettes$Moonrise3[c(3, 4, 5, 1, 2)]) +
theme_minimal() +
theme(legend.position = "bottom") +
guides(fill = guide_legend(nrow = 5, byrow = TRUE))
})
output$plot_critical_level <- renderPlot({
if (input$borough == 'Overall' & input$cuisine == 'Overall') {
df_critical <- df
} else if (input$borough != 'Overall' & input$cuisine == 'Overall') {
df_critical <- df %>%
filter(boro == input$borough)
} else if (input$borough == 'Overall' & input$cuisine != 'Overall') {
df_critical <- df %>%
filter(cuisine_description == input$cuisine)
} else {
df_critical <- df %>%
filter(boro == input$borough,
cuisine_description == input$cuisine)
}
df_critical %>%
filter(critical_flag != "Not Applicable") %>%
group_by(year, critical_flag) %>%
summarize(num_violations = n()) %>%
ggplot(aes(x = year, y = num_violations, fill = critical_flag)) +
geom_bar(stat = "identity") +
labs(title = "Number of Violations by Critical Level over Time", x = "Year", y = "Count", fill = "Critical Level") +
theme_minimal() +
theme(legend.position = "bottom")
})
output$plot_top_5_violation <- renderPlot({
if (input$borough == 'Overall' & input$cuisine == 'Overall') {
df_top_5 <- df
} else if (input$borough != 'Overall' & input$cuisine == 'Overall') {
df_top_5 <- df %>%
filter(boro == input$borough)
} else if (input$borough == 'Overall' & input$cuisine != 'Overall') {
df_top_5 <- df %>%
filter(cuisine_description == input$cuisine)
} else {
df_top_5 <- df %>%
filter(boro == input$borough,
cuisine_description == input$cuisine)
}
df_top_5 %>%
group_by(year, violation_code) %>%
summarize(num_violations = n()) %>%
ungroup() %>%
group_by(year) %>%
slice_max(num_violations, n = 5) %>%
ggplot(aes(x = year, y = num_violations, fill = violation_code)) +
geom_bar(stat = "identity") +
labs(title = "Top 5 Violations over Time", x = "Year", y = "Count", fill = "Violation Code") +
scale_fill_brewer(palette = "Set2") +
theme_minimal() +
theme(legend.position = "bottom")
})
########### Interactive map ###############
#violation map
nc_pal <- colorNumeric(palette ="YlOrBr", domain = violations[[1]][[4]]@data$Total, na.color = 'transparent')
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles("CartoDB") %>%
addPolygons(
data = violations[[input$type]][[input$time]],
weight = 0.5,
color = "black",
stroke = TRUE,
fillOpacity = 1,
fillColor = ~nc_pal(Total),
label = ~paste0 ('Total Violations : ', Total),
group = '2022',
highlight = highlightOptions(weight = 3, color = "red", bringToFront = TRUE)
) %>%
addLegend(pal = nc_pal, values = violations[[input$type]][[input$time]]$Total, opacity = 0.9, title = "Count of Total Violation", position = "bottomleft" )
})
# Interactive map compared by year
output$map_comp1 <- renderLeaflet({
leaflet() %>%
addProviderTiles("CartoDB") %>%
addPolygons(
data = violations[[input$type_comp]][[input$time1]],
weight = 0.5,
color = "black",
stroke = TRUE,
opacity = 1,
fillOpacity = 1,
fillColor = ~nc_pal(Total),
label = ~paste0 ('Total Violations : ', Total),
group = '2022',
highlight = highlightOptions(weight = 3, color = "red", bringToFront = TRUE)
) %>%
addLegend(pal = nc_pal, values= violations[[input$type]][[input$time1]]$Total, opacity=0.9, title = "Count of Total Violation", position = "bottomleft" )
})
output$map_comp2 <- renderLeaflet({
leaflet() %>%
addProviderTiles("CartoDB") %>%
addPolygons(
data = violations[[input$type_comp]][[input$time2]],
weight = 0.5,
color = "black",
stroke = TRUE,
opacity = 1,
fillOpacity = 1,
fillColor = ~nc_pal(Total),
label = ~paste0 ('Total Violations : ', Total),
group = '2022',
highlight = highlightOptions(weight = 3, color = "red", bringToFront = TRUE)
) %>%
addLegend(pal = nc_pal, values = violations[[input$type]][[input$time2]]$Total, opacity = 0.9, title = "Count of Total Violation", position = "bottomleft" )
})
# Interactive score map
output$score_map <- renderLeaflet({
nc_pal <- colorNumeric(palette ="Greens", domain = score_map[[3]]@data$mean_score, na.color = 'transparent')
leaflet() %>%
addProviderTiles("CartoDB") %>%
addPolygons(
data = score_map[[input$score_year]],
weight = 0.5,
color = "black",
stroke = TRUE,
fillOpacity = 1,
fillColor = ~nc_pal(mean_score),
label = ~paste0 ('Mean Inspection Score: ', mean_score),
group = '2022',
highlight = highlightOptions(weight = 3, color = "red", bringToFront = TRUE)
) %>%
addLegend(pal = nc_pal, values = score_map[[input$score_year]]$mean_score, opacity = 0.9, title = "Mean Score", position = "bottomleft" )
})
}
# Run the application
shinyApp(ui = ui, server = server)
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
help(resourcePathHandler)
saveRDS(borough_list,file="../data/borough_list.Rda")
saveRDS(cuisine_list,file="../data/cuisine_list.Rda")
saveRDS(df,file = "../data/df.Rda")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
names(violations) <- c("Number of Total Violations","Number of Critical Violations")
##### Download Packages Needed
if (!require("shiny")) {
install.packages("shiny")
library(shiny)}
if (!require("broom")) {
install.packages("broom")
library(broom)}
if (!require("dplyr")) {
install.packages("dplyr")
library(dplyr)}
if (!require("geojsonio")) {
install.packages("geojsonio")
library(geojsonio)}
if (!require("ggnewscale")) {
install.packages("ggnewscale")
library(ggnewscale)}
if (!require("osmdata")) {
install.packages("osmdata")
library(osmdata)}
if (!require("RSocrata")) {
install.packages("RSocrata")
library(RSocrata)}
if (!require("rstudioapi")) {
install.packages("rstudioapi")
library(rstuioapi)}
if (!require("sf")) {
install.packages("sf")
library(sf)}
if (!require("tidyverse")) {
install.packages("tidyverse")
library(tidyverse)}
if (!require("wesanderson")) {
install.packages("wesanderson")
library(wesanderson)}
if (!require("leaflet.extras")) {
install.packages("leaflet.extras")
library(leaflet.extras)}
if (!require("htmltools")) {
install.packages("htmltools")
library(htmltools)}
# Set working directory
current_path <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
getwd()
# Load the restaurant dataset
data <- read.socrata(
"https://data.cityofnewyork.us/resource/43nn-pn8j.json",
app_token = "zTRehp1897SQtpYtBiIOUMfR4"
)
# Extract years
data$year <- format(data$inspection_date,"%Y")
# Filter the dataset
df <- data %>%
filter(data$year >= 2019 & zipcode != "" & dba != "") %>%
mutate(grade = replace(grade, grade == "", NA))
df$latitude <- as.numeric(df$latitude)
df$longitude <- as.numeric(df$longitude)
# Read the geojson file containing spatial info
spdf_file <- geojson_read("../data/zip_code_040114.geojson", what = "sp")
stats_df <- spdf_file@data
# Convert it to a spatial data frame, with zip code as index
spdf_data <- tidy(spdf_file,
region = "ZIPCODE"  # Use ZIPCODE variable as index, the index will be named "id"
)
borough_list <- append("Overall", unique(df$boro))
cuisine_list <- append("Overall", unique(df$cuisine_description))
saveRDS(borough_list,file="../output/borough_list.Rda")
saveRDS(cuisine_list,file="../output/cuisine_list.Rda")
saveRDS(df,file = "../output/df.Rda")
##============ Data Preparation for Violation Maps =============
####=====critical violations ============#####
### Grade info for each type of restaurant
grades =
df %>%
group_by(dba, latitude, longitude) %>%   ##windows function partition by DBA, Lat, and Long
mutate(rowNum = row_number(desc(inspection_date))) %>% #specify how to list row numbers here; desc for latest first.
filter(rowNum == 1)%>%
drop_na(longitude)%>%
mutate(CUISINE.TYPE =
case_when(cuisine_description == "American" ~ "American",
cuisine_description == "Chinese" ~ "Chinese",
cuisine_description == "Coffee/Tea" ~ "Coffee",
cuisine_description == "Pizza" ~ "Pizza",
cuisine_description == "Italian" ~ "Italian",
cuisine_description == "Mexican" ~ "Mexican",
TRUE ~ "Others"))
American =
grades%>%filter(CUISINE.TYPE == "American")
saveRDS(American,file="../output/American.Rda")
Chinese=
grades%>%filter(CUISINE.TYPE == "Chinese")
saveRDS(Chinese,file="../output/Chinese.Rda")
Coffee =
grades%>%filter(CUISINE.TYPE == "Coffee")
saveRDS(Coffee,file="../output/Coffee.Rda")
Italian =
grades%>%filter(CUISINE.TYPE == "Italian")
saveRDS(Italian,file="../output/Italian.Rda")
Pizza =
grades%>%filter(CUISINE.TYPE == "Pizza")
saveRDS(Pizza,file="../output/Pizza.Rda")
Mexican =
grades%>%filter(CUISINE.TYPE == "Mexican")
saveRDS(Mexican,file="../output/Mexican.Rda")
Others =
grades%>%filter(CUISINE.TYPE == "Others")
saveRDS(Others,file="../output/Others.Rda")
#### Number of restaurant per ZIPCODE
Num_Rest_Code =
df%>%
group_by(zipcode, dba, latitude, longitude)%>%
count() %>%
group_by(zipcode)%>%
count()
Critical_2019_by_Code =
df%>%
filter(year == 2019)%>%
group_by(zipcode)%>%
summarize(Total = n())
Critical_2020_by_Code =
df%>%
filter(year == 2020)%>%
group_by(zipcode)%>%
summarize(Total = n())
Critical_2021_by_Code =
df%>%
filter(year == 2021)%>%
group_by(zipcode)%>%
summarize(Total = n())
Critical_2022_by_Code =
df%>%
filter(year == 2022)%>%
group_by(zipcode)%>%
summarize(Total = n())
Critical_spdf_file_2022 = spdf_file
Critical_spdf_file_2022@data =
Critical_spdf_file_2022@data %>%
left_join(Critical_2022_by_Code, c("ZIPCODE"="zipcode"))
saveRDS(Critical_spdf_file_2022,file="../output/critical_2022.Rda")
Critical_spdf_file_2019 = spdf_file
Critical_spdf_file_2019@data =
Critical_spdf_file_2019@data %>%
left_join(Critical_2019_by_Code, c("ZIPCODE"="zipcode"))
saveRDS(Critical_spdf_file_2019,file="../output/critical_2019.Rda")
Critical_spdf_file_2020 = spdf_file
Critical_spdf_file_2020@data =
Critical_spdf_file_2020@data %>%
left_join(Critical_2020_by_Code, c("ZIPCODE"="zipcode"))
saveRDS(Critical_spdf_file_2020,file="../output/critical_2020.Rda")
Critical_spdf_file_2021 = spdf_file
Critical_spdf_file_2021@data =
Critical_spdf_file_2021@data %>%
left_join(Critical_2021_by_Code, c("ZIPCODE"="zipcode"))
saveRDS(Critical_spdf_file_2021,file="../output/critical_2021.Rda")
critical_violations <- list(Critical_spdf_file_2019, Critical_spdf_file_2020, Critical_spdf_file_2021, Critical_spdf_file_2022)
names(critical_violations) <- c("2019", "2020", "2021", "2022")
###=====total violations========
Total_2019_by_Code =
df%>%
filter(year == 2019 & critical_flag %in% c('Critical', 'Not Critical'))%>%
group_by(zipcode)%>%
summarize(Total = n())
Total_2020_by_Code =
df%>%
filter(year == 2020 & critical_flag %in% c('Critical', 'Not Critical'))%>%
group_by(zipcode)%>%
summarize(Total = n())
Total_2021_by_Code =
df%>%
filter(year == 2021 & critical_flag %in% c('Critical', 'Not Critical'))%>%
group_by(zipcode)%>%
summarize(Total = n())
Total_2022_by_Code =
df%>%
filter(year == 2022 & critical_flag %in% c('Critical', 'Not Critical'))%>%
group_by(zipcode)%>%
summarize(Total = n())
##### Join datasets
Total_spdf_file_2022 = spdf_file
Total_spdf_file_2022@data =
Total_spdf_file_2022@data %>%
left_join(Total_2022_by_Code, c("ZIPCODE"="zipcode"))
saveRDS(Total_spdf_file_2022,file="../output/total_2022.Rda")
Total_spdf_file_2019 = spdf_file
Total_spdf_file_2019@data =
Total_spdf_file_2019@data %>%
left_join(Total_2019_by_Code, c("ZIPCODE"="zipcode"))
saveRDS(Total_spdf_file_2019,file="../output/total_2019.Rda")
Total_spdf_file_2020 = spdf_file
Total_spdf_file_2020@data =
Total_spdf_file_2020@data %>%
left_join(Total_2020_by_Code, c("ZIPCODE"="zipcode"))
saveRDS(Total_spdf_file_2020,file="../output/total_2020.Rda")
Total_spdf_file_2021 = spdf_file
Total_spdf_file_2021@data =
Total_spdf_file_2021@data %>%
left_join(Total_2021_by_Code, c("ZIPCODE"="zipcode"))
saveRDS(Total_spdf_file_2021,file="../output/total_2021.Rda")
total_violation <- list(Total_spdf_file_2019, Total_spdf_file_2020, Total_spdf_file_2021, Total_spdf_file_2022)
names(total_violation) <- c("2019", "2020", "2021", "2022")
##=======================Data Preparation for Score Map ===========
df$score <- as.numeric(df$score)
score_total <- df %>%
filter(!is.na(score))%>%
group_by(zipcode)%>%
summarise(mean_score = mean(score))
score_2019 <- df%>%
filter(!is.na(score)&year==2019)%>%
group_by(zipcode)%>%
summarise(mean_score = mean(score))
score_2019$mean_score <- round(score_2019$mean_score,2)
score_2020 <- df%>%
filter(!is.na(score)&year==2020)%>%
group_by(zipcode)%>%
summarise(mean_score = mean(score))
score_2020$mean_score <- round(score_2020$mean_score,2)
score_2021 <- df%>%
filter(!is.na(score)&year==2021)%>%
group_by(zipcode)%>%
summarise(mean_score = mean(score))
score_2021$mean_score <- round(score_2021$mean_score,2)
score_2022 <- df%>%
filter(!is.na(score)&year==2022)%>%
group_by(zipcode)%>%
summarise(mean_score = mean(score))
score_2022$mean_score <- round(score_2022$mean_score,2)
Score_spdf_file_2019 <- spdf_file
Score_spdf_file_2019@data <- Score_spdf_file_2019@data %>%
left_join(score_2019, c("ZIPCODE" = "zipcode"))
Score_spdf_file_2020 <- spdf_file
Score_spdf_file_2020@data <- Score_spdf_file_2020@data %>%
left_join(score_2020, c("ZIPCODE" = "zipcode"))
Score_spdf_file_2021 <- spdf_file
Score_spdf_file_2021@data <- Score_spdf_file_2021@data %>%
left_join(score_2021, c("ZIPCODE" = "zipcode"))
Score_spdf_file_2022 <- spdf_file
Score_spdf_file_2022@data <- Score_spdf_file_2022@data %>%
left_join(score_2022, c("ZIPCODE" = "zipcode"))
score_map <- list(Score_spdf_file_2019,Score_spdf_file_2020,Score_spdf_file_2021,Score_spdf_file_2022)
names(score_map) <- c("2019","2020","2021","2022")
comparison <- list(critical_violations,total_violation,score_map)
names(comparison) <-  c("Number of Total Violations", "Number of Critical Violations","Mean Score")
violations <- list(total_violation,critical_violations)
names(violations) <- c("Number of Total Violations","Number of Critical Violations")
#save processed score data
saveRDS(comparison,file = "../output/comparison.Rda")
saveRDS(score_map,file="../output/score_map.Rda")
saveRDS(violations,file = "../output/violations.Rda")
runApp('~/Downloads/Columbia University/Fall2022/STAT4243/Project 2/fall2022-project2-group2/app')
runApp('~/Downloads/Columbia University/Fall2022/STAT4243/Project 2/fall2022-project2-group2/app')
